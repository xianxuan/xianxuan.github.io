<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://xianxuan.github.io/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Jan 2019 14:18:01 +0800</lastBuildDate>
    
	<atom:link href="https://xianxuan.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis设计与实现之数据结构域对象</title>
      <link>https://xianxuan.github.io/post/redis/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Thu, 10 Jan 2019 14:18:01 +0800</pubDate>
      
      <guid>https://xianxuan.github.io/post/redis/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AF%B9%E8%B1%A1/</guid>
      <description>简单动态字符串  Redis没有直接使用C语言传统的字符串表示(以空字符结尾的字符数组，以下简称C 字符串)，而是自己构建了一种名为简单动态字符串( simple dynamic string, SDS )的抽象类型，并将SDS用作Redis的默认字符串表示。
 在Redis里面，C字符串只会作为字符串字面量( string literal) 用在一些无须对字符串值进行修改的地方，比如打印日志.
 Redis的键和值都是SDS，除了用来保存字符串值歪，还被用作缓冲区（Buffer）：AOF模块中的AOF缓冲区，以及客户端状态中的输人缓冲区,都是由SDS实现的.
  SDS 的定义  每个sds . h/ sdshdr结构表示-一个SDS值:
struct sdshdr { //记录buf数组中已使用字节的数量 //等于SDS所保存字符串的长度 int len; //记录buf数组中未使用宇节的数量 int free; //字节数组，用于保存字符串 char buf[] ; };   free属性的值为0,表示这个SDS没有分配任何未使用空间。
 len属性的值为5,表示这个SDS保存了一个五字节长的字符串。
 buf属性是-个char类型的数组.
  SDS遵循C字符串以空字符结尾的惯例，保存空字符的1字节空间不计算在SDS的len属性里面，并且为空字符分配额外的1字节空间，以及添加空字符到字符串末尾等操作，都是由SDS函数自动完成的,所以这个空字符对于SDS的使用者来说是完全透明的。遵循空字符结尾这一. 惯例的好处是，SDS 可以直接重用一部分C字符串函数库里面的函数。
  SDS 与 C 字符串的区别  根据传统，C语言使用长度为N+1的字符数组来表示长度为N的字符串,并且字符数组的最后-一个元素总是空字符&amp;rsquo;\0&amp;rsquo;。
 但是C语言这种简单的字符串表示方式并不能满足Redis对字符串的安全性、效率以及功能方面的要求。
  常数复杂度获取字符串长度  因为C字符串并环记录自身的长度信息，所以为了获取-个C字符串的长度，程序必须遍历整个字符串，对遇到的每个字符进行计数，直到遇到代表字符串结尾的空字符为止，这个操作的复杂度为0(N)。
 和C字符串不同，因为SDS在len属性中记录了SDS本身的长度，所以获取一个SDS长度的复杂度仅为0(1)。</description>
    </item>
    
    <item>
      <title>高性能mysql</title>
      <link>https://xianxuan.github.io/post/mysql/%E9%AB%98%E6%80%A7%E8%83%BDmysql/</link>
      <pubDate>Mon, 07 Jan 2019 18:00:07 +0800</pubDate>
      
      <guid>https://xianxuan.github.io/post/mysql/%E9%AB%98%E6%80%A7%E8%83%BDmysql/</guid>
      <description>事务 在事务中混合使用存储引擎  MySQL服务器层不管理事务，事务是由下层的存储引擎实现的。所以在同一个事务中，使用多种存储引擎是不可靠的。
 如果在事务中混合使用了事务型和非事务型的表(例如InnoDB和MyISAM表)，在正常提交的情况下不会有什么问题。
 但如果该事务需要回滚，非事务型的表上的变更就无法撤销，这会导致数据库处于不一致的状态，这种情况很难修复，事务的最终结果将无法确定。所以，为每张表选择合适的存储引擎非常重要。
 在非事务型的表上执行事务相关操作的时候，MySQL通常不会发出提醒，也不会报错。有时候只有回滚的时候才会发出一个警告:“某些非事务型的表上的变更不能被回滚”。但大多数情况下，对非事务型表的操作都不会有提示。
  隐式和显式锁定  InnoDB采用的是两阶段锁定协议(two-phase locking protocol)。在事务执行过程中，随时都可以执行锁定，锁只有在执行COMMIT或者ROLLBACK的时候才会释放，并且所有的锁是在同一时刻被释放。前面描述的锁定都是隐式锁定，InnoDB会根据隔离级别在需要的时候自动加锁。
 另外，InnoDB也支持通过特定的语句进行显式锁定，这些语句不属于SQL规范生:
 select &amp;hellip; lock in share mode
 select &amp;hellip; for update
  MySQL 也支持L0CK TABLES 和UNLOCK TABLES 语句，这是在服务器层实现的，和存储引擎无关。它们有自己的用途，但并不能替代事务处理。如果应用需要用到事务，还是应该选择事务型存储引擎。(注：尽量的不要显示的使用lock table)
  多版本并发控制  InnoDB的MVCC,是通过在每行记录后面保存两个隐藏的列来实现的。这两个列，一个保存了行的创建时间，一个保存行的过期时间(或删除时间)。当然存储的并不是实际的时间值，而是系统版本号(system version number)。 每开始一个新的事务，系统版际的时间值，而是系统版本号(system version number)。 每开始一-个新的事务，系统版每行记录的版本号进行比较。下面看一下在REPEATABLE READ 隔离级别下，MVCC具体是如何操作的。
 SELECT（InnoDB会根据以下两个条件检查每行记录:）
 a.InnoDB只查找版本早于当前事务版本的数据行(也就是，行的系统版本号小，于或等于事务的系统版本号),这样可以确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的。
 b.行的删除版本要么未定义，要么大于当前事务版本号。这可以确保事务读取到的行，在事务开始之前未被删除。
 只有符合上述两个条件的记录，才能返回作为查询结果。
  INSERT
 InnoDB为新插入的每&amp;ndash;行保存当前系统版本号作为行版本号。  DELETE
 InnoDB为删除的每一行保存 当前系统版本号作为行删除标识。  UPDATE</description>
    </item>
    
    <item>
      <title>Mysql技术内幕之事务</title>
      <link>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8B%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Fri, 04 Jan 2019 15:22:44 +0800</pubDate>
      
      <guid>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8B%E4%BA%8B%E5%8A%A1/</guid>
      <description>认识事务  ACID特性：
 原子性（atomicity）
 一致性（consistency）
 隔离性（isolation）
 持久性（durability）
  事务类型：
 扁平事务( Flat Transactions )
 带有保存点的扁平事务( Flat Transactions with Savepoints)
 链事务(Chained Transactions )
 嵌套事务( Nested Transactions )
 分布式事务(Distributed Transactions)
   事务的实现  原子性、-致性、持久性通过数据库的redo log和undo log来完成。redo log称为重做日志，用来保证事务的原子性和持久性。undo log用来保证事务的一致性。
 redo和undo的作用都可以视为是一种恢复操作，redo恢复提交事务修改的页操作，而undo回滚行记录到某个特定版本。因此两者记录的内容不同，redo通常是物理日志，记录的是页的物理修改操作。undo 是逻辑日志，根据每行记录进行记录。
  redo 基本概念  重做日志用来实现事务的持久性，即事务ACID中的D。其由两部分组成:一种是内存中的重做日志缓冲(redo log buffer),其是易失的;二是重做日志文件( redo log file),其是持久的。
 InnoDB是事务的存储引擎，其通过ForceLogatCommit机制实现事务的持久性，即当事务提交(COMMIT)时，必须先将该事务的所有日志写人到重做日志文件进行持久化，待事务的COMMIT操作完成才算完成。这里的日志是指重做日志，在InnoDB存储引擎中，由两部分组成，即redo log和undo log。redo log用来保证事务的持久性，undolog用来帮助事务回滚及MVCC的功能。redo log基本上都是顺序写的，在数据库运行时不需要对redolog的文件进行读取操作。而undo log是需要进行随机读写的。
 为了确保每次日志都写人重做日志文件，在每次将重做日志缓冲写入重做日志文件后，InnoDB存储引擎都需要调用一次fsync操作。由于重做日志文件打开并没有使用O_DIRECT选项，因此重做日志缓冲先写入文件系统缓存。为了确保重做日志写入磁盘，必须进行&amp;ndash;次fsync操作。由于fsync的效率取决于磁盘的性能，因此磁盘的性能决定了事务提交的性能，也就是数据库的性能。</description>
    </item>
    
    <item>
      <title>Mysql技术内幕之锁</title>
      <link>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8B%E9%94%81/</link>
      <pubDate>Fri, 21 Dec 2018 18:33:08 +0800</pubDate>
      
      <guid>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8B%E9%94%81/</guid>
      <description>lock与latch  latch一般称为闩锁(轻量级的锁)，因为其要求锁定的时间必须非常短。若持续的时间长，则应用的性能会非常差。在InnoDB存储引擎中, latch 又可以分为mutex (互斥量)和rwlock(读写锁)。其目的是用来保证并发线程操作临界资源的正确性，并且通常没有死锁检测的机制。
 对象：线程
 保护：内存数据结构
 持续时间：临界资源
 模式：读写锁、互斥量
 死锁：无死锁检测机制。仅通过应用程序加锁的顺序保证无死锁的情况发生
 存在于：每个数据结构的对象
  lock的对象是事务，用来锁定的是数据库中的对象，如表、页、行。并且一般lock的对象仅在事务commit或rollback后进行释放(不同事务隔离级别释放的时间可能不同)。此外，lock， 正如在大多数数据库中- -样，是有死锁机制的。
 对象：事务
 保护：数据库内容
 持续时间：整个事务过程
 模式：行锁、表锁、意向锁。
 死锁：通过waits-for graph、time out等机制进行死锁检测与处理
 存在于：Lock Manager的哈希表中
  InnoDB 中latch可以通过 SHOW ENGINE INNODB MUTEX进行查看，lock可以通过命令SHOW ENGINE INNODB STATUS及information schema 架构下的表INNODB_TRX、INNODB_LOCKS、INNODB_LOCK_WAITS 来观察锁的信息。
  InnoDB存储引擎中的锁 锁的类型  InnoDB存储引擎实现了如下两种标准的行级锁:
 共享锁(S Lock),允许事务读- -行数据。
 排他锁(X Lock),允许事务删除或更新-一行数据。
  X锁与任何的锁都不兼容，而S锁仅和S锁兼容。需要特别注意的是，S和X锁都是行锁,兼容是指对同- -记录(row) 锁的兼容性情况。</description>
    </item>
    
    <item>
      <title>Mysql技术内幕之索引与算法</title>
      <link>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8B%E7%B4%A2%E5%BC%95%E4%B8%8E%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 12 Dec 2018 19:10:32 +0800</pubDate>
      
      <guid>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8B%E7%B4%A2%E5%BC%95%E4%B8%8E%E7%AE%97%E6%B3%95/</guid>
      <description>InnoDB 存储引擎索引概述  InnoDB 存储引擎支持以下索引：
 B+ 树索引
 全文索引
 哈希索引
  InnoDB 存储引擎的哈希索引是自适应的，会根据表使用的具体情况自动生成哈希索引，不能人为干预生成。
 B+树索引就是传统意义上的索引，这是目前关系型数据库系统中查找最为常用和最为有效的索引。B+树索引的构造类似于二叉树，根据键值(Key Value)快速找到数据。
 注：B+树中的B不是代表二叉(binary)， 而是代表平衡(balance), 因为B+树是从最早的平衡二叉树演化而来，但是B+树不是一个二叉树。
 B+树索引并不能找到一个给定键值的具体行。B+树索引能找到的只是被查找数据行所在的页。然后数据库通过把页读人到内存，再在内存中进行查找，最后得到要查找的数据。
  数据结构与算法 二分查找法  每页Page Directory中的槽是按照主键的顺序存放的，对于某一条具体记录的查询是通过对Page Directory进行二分查找得到的。  二叉查找树和平衡二叉树  B+树是通过二叉查找树，再由平衡二叉树，B树演化而来。
 在二叉查找树中,左子树的键值总是小于根的键值，右子树的键值总是大于根的键值。
 平衡二叉树的定义如下:首先符合二叉查找树的定义,其次必须满足任何节点的两个子树的高度最大差为1。
 维护一个平衡二叉树需要进行更新操作，是有一定开销的。
  B+ 树  B+树: B+ 树是为磁盘或其他直接存取辅助设备设计的&amp;ndash;种平衡查找树。在B+树中，所有记录节点都是按键值的大小顺序存放在同-层的叶子节点上，由各叶子节点指针进行连接。
 B+树插入规则：
 Leaf Page不满，Index Page 不满 直接将记录插入到叶子节点。
 Leaf Page满，Index Page 不满
 拆分Leaf Page
 将中间的节点放入到Index Page中</description>
    </item>
    
    <item>
      <title>Mysql技术内幕之表</title>
      <link>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8B%E8%A1%A8/</link>
      <pubDate>Mon, 10 Dec 2018 13:26:06 +0800</pubDate>
      
      <guid>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8B%E8%A1%A8/</guid>
      <description>索引组织表  在InnoDB存储引擎中，表都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表(indexorganizedtable).在InnoDB存储引擎表中，每张表都有个主键(Primary Key),如果在创建表时没有显式地定义主键，则InnoDB存储引擎会按如下方式选择或创建主键:
 首先判断表中是否有非空的唯&amp;ndash;索引(UniqueNOTNULL),如果有，则该列即为主键。
 如果不符合上述条件，InnoDB 存储引擎自动创建-一个6字节大小的指针。
  当表中有多个非空唯一索引时， InnoDB 存储引擎将选择建表时第一个定义的非空唯一索引为主键。这里需要非常注意的是，主键的选择根据的是定义索引的顺序，而不是建表时列的顺序。首先定义为唯一索引的字段。
 mysql 可以通过_rowid显示表的主键。但是只能用来查看单个列为主键的情况，对于多列组成的主键就显得无能为力了。
  InnoDB 逻辑存储结构  表空间（所有数据）-&amp;gt; 段 -&amp;gt; 区 -&amp;gt; 页（或者块）   表空间  表空间是InnoDB存储引擎逻辑结构的最高层，如果用户启用了innodb_file_per_table 每张表内的数据单独的放到一个表空间内，但是只存放数据、索引和插入缓冲Bitmap页，其他类的数据，如回滚信息，插入缓冲索引页，系统时无信息，二次写缓冲等还是存放在原来的共享表空间内。   段  常见的段有数据段、索引段、回滚段等。InnoDB存储引擎表是索引组织的(index organized)，因此数据即索引，索引即数据。那么数据段即为B+树的叶子节点, 索引段即为B+树的非叶子节点。  区  区是由连续页组成的空间，在任何情况下每个区的大小都为1MB。为了保证区中页的连续性，InnoDB 存储引擎-次从磁盘申请4 ~ 5个区。在默认情况下，InoDB存储引擎页的大小为16KB，即-一个区中- -共有64个连续的页。
 InnoDB 1.0.x 版本开始引人压缩页，即每个页的大小可以通过参数KEY_BLOCK_SIZE设置为2K、4K、8K，因此每个区对应页的数量就应该为512、256、128。
 InnoDB 1.2.x 版本新增了参数innodb_ page_ size, 通过该参数可以将默认页的大小设置为4K、8K,但是页中的数据库不是压缩。这时区中页的数量同样也为256、128。总之，不论页的大小怎么变化，区的大小总是为1M。
 在用户启用了参数innodb_file_per_talbe 后，创建的表默认大小是96KB。这是因为在每个段开始时，先用32个页大小的碎片页( fragment page)来存放数据，在使用完这些页之后才是64个连续页的申请。这样做的目的是，对于- -些小表，或者是undo这类的段，可以在开始时申请较少的空间，节省磁盘容量的开销。
  页  同大多数数据库一样，InnoDB 有页(Page) 的概念(也可以称为块)，页是InnoDB磁盘管理的最小单位。在InnoDB存储引擎中，默认每个页的大小为16KB。而从InnoDB1.</description>
    </item>
    
    <item>
      <title>Clean_code</title>
      <link>https://xianxuan.github.io/post/clean_code/clean_code/</link>
      <pubDate>Sat, 08 Dec 2018 23:12:52 +0800</pubDate>
      
      <guid>https://xianxuan.github.io/post/clean_code/clean_code/</guid>
      <description> “稍等等于永不”
 &amp;ldquo;外表或举止上令人愉悦的优雅和美观&amp;rdquo;
  </description>
    </item>
    
    <item>
      <title>Mysql技术内幕之文件</title>
      <link>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8B%E6%96%87%E4%BB%B6/</link>
      <pubDate>Thu, 06 Dec 2018 18:27:20 +0800</pubDate>
      
      <guid>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8B%E6%96%87%E4%BB%B6/</guid>
      <description>参数文件  mysql启动的时候会先去读取一个配置参数文件，默认情况下，mysql会按照一定的顺序在指定位置读取，如果在制定位置没有找到mysql架构，那么mysql启动将会失败。
 mysql的参数文件是文本方式存储的
  什么是参数  可以把mysql的参数看做键值对，通过show variables 可以查看所有参数.   参数类型  mysql参数类型分为两类：
 动态参数
 静态参数
  动态参数意味着可以在MySQL实例运行中进行更改，静态参数说明在整个实例生命周期内都不得进行更改，就好像是只读(read only)的。可以通过SET命令对动态的参数值进行修改，SET 的语法如下:
SET | [global | session] system_var_name= expr | [@@g1obal. | @@session. | @@]system_var_name= expr  这里可以看到global和session关键字，它们表明该参数的修改是基于当前会话还是整个实例的生命周期。有些动态参数只能在会话中进行修改，如autocommit;而有些参数修改完后，在整个实例生命周期中都会生效，如binlog. cache_size ;而有些参数既可以在会话中又可以在整个实例的生命周期内生效，如read_buffer_size。
 这里需要注意的是，对变量的全局值进行了修改，在这次的实例生命周期内都有效，但MySQL实例本身并不会对参数文件中的该值进行修改。也就是说，在下次启动时MySQL实例还是会读取参数文件。若想在数据库实例下&amp;ndash;次启动时该参数还是保留为当前修改的值，那么用户必须去修改参数文件。
 静态变量对其进行修改会报错
  日志文件  日志文件类型
 错误日志
 二进制日志
 慢查询日志
 查询日志
   错误日志  错误日志文件对MySQL的启动、运行、关闭过程进行了记录。MySQL DBA在遇到问题时应该首先查看该文件以便定位问题。该文件不仅记录了所有的错误信息，也记录一些警告信息或正确的信息。用户可以通过命令SHOW VARIABLES LIKE &amp;lsquo;log error&amp;rsquo; 来定位该文件.</description>
    </item>
    
    <item>
      <title>Mysql技术内幕之InnoDB存储引擎</title>
      <link>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8Binnodb%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link>
      <pubDate>Wed, 05 Dec 2018 13:40:44 +0800</pubDate>
      
      <guid>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8Binnodb%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid>
      <description>InnoDB存储引擎概述  第一个完成支持ACID事物的mysql存储引擎。   InnoDB体系架构  后台线程-&amp;gt;InnoDB存储引擎内存池-&amp;gt;文件   后台线程  Master Thread
 MasterThread是&amp;ndash;个非常核心的后台线程，主要负责将缓冲池中的数据异步刷新到磁盘，保证数据的一-致性，包括脏页的刷新、合并插人缓冲(INSERT BUFFER)、UNDO页的回收等。   IO Thread
 在InnoDB存储引擎中大量使用了AIO (Async I0)来处理写IO请求，这样可以极大提高数据库的性能。而IOThread的工作主要是负责这些IO请求的回调(callback)处理。  Purge Thread
 事务被提交后，其所使用的undolog可能不再需要，因此需要PurgeThread来回收已经使用并分配的undo页。   Page Cleaner Thread
 其作用是将之前版本中脏页的刷新操作都放人到单独的线程中来完成。而其目的是为了减轻原Master Thread的工作及对于用户查询线程的阻塞，进- -步提高InnoDB存储引擎的性能。   内存 缓冲池  缓冲池简单来说就是一块内存区域，通过内存的速度来弥补磁盘速度较慢对数据库性能的影响。
 在数据库中进行读取页的操作，首先将从磁盘读到的页存放在缓冲池中，这个过程称为将页“FIX”在缓冲池中。下一次再读相同的页时，首先判断该页是否在缓冲池中。若在缓冲池中，称该页在缓冲池中被命中，直接读取该页。否则，读取磁盘上的页。
 对于数据库中页的修改操作，则首先修改在缓冲池中的页，然后再以一定的频率刷新到磁盘上。这里需要注意的是，页从缓冲池刷新回磁盘的操作并不是在每次页发生更新时触发，而是通过- -种称为Checkpoint的机制刷新回磁盘。同样，这也是为了提高数据库的整体性能。
 对于InnoDB存储引擎而言，其缓冲池的配置通过参数innodb__buffer_poolsize来设置。可以通过参数innodb buffer_ pool instances 来进行配置，缓冲池实例个数。
 具体来看，缓冲池中缓存的数据页类型有:索引页、数据页、undo页、插人缓冲(insertbuffer)、自适应哈希索引(adaptivehashindex)、InnoDB存储的锁信息(lockinfo)、数据字典信息( data dictionary)等。不能简单地认为，缓冲池只是缓存索引页和数据页，它们只是占缓冲池很大的一部分而已。
  LRU List. Free List FI Flush List  通常来说，数据库中的缓冲池是通过LRU ( Latest Recent Used,最近最少使用)算法来进行管理的。即最频繁使用的页在LRU列表的前端，而最少使用的页在LRU列表的尾端。当缓冲池不能存放新读取到的页时，将首先释放LRU列表中尾端的页。</description>
    </item>
    
    <item>
      <title>Mysql技术内幕之体系结构和存储引擎</title>
      <link>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8B%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link>
      <pubDate>Wed, 05 Dec 2018 10:16:03 +0800</pubDate>
      
      <guid>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8B%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid>
      <description>数据库和实例的定义  数据库:物理操作系统文件或其他形式文件类型的集合。在MySQL数据库中，数据库文件可以是fm、MYD、MYI、ibd 结尾的文件。当使用NDB引擎时，数据库的文件可能不是操作系统上的文件，而是存放于内存之中的文件，但是定义仍然不变。
 实例: MySQL数据库由后台线程以及一个共享内存区组成。共享内存可以被运行的后台线程所共享。需要牢记的是，数据库实例才是真正用于操作数据库文件的。
 区别：这两个词有时可以互换使用，不过两者的概念完全不同。在MySQL数据库中，实例与数据库的关通常系是- &amp;ndash;对应的，即-一个实例对应-一个数据库，-一个数据库对应一个实例。但是，在集群情况下可能存在一个数据库被多个数据实例使用的情况。
 mysql是单进程多线程架构的数据库，和sqlserver类似，和oracle不同（oracle的windows版本也是单进程多线程架构）,mysql数据库实例就是一个进程
 mysql数据库会读取配置文件，配置文件存放位置可以通过以下代码查看：
命令：mysql --help | grep my.cnf 输出：order of preference, my.cnf, $MYSQL_ _TCP_ PORT, /etc/my.cnf /etc/mysql/my.cnf /usr/ local/mysql/etc/my.cnf ~/ .my.cnf  可以看到，MySQL 数据库是按/etc/my.cnf→/etc/mysql/my.cnf - + /usr/local/mysqletc/my.cnf→~ /.my.cnf的顺序读取配置文件的。可能有读者会问:“如果几个配置文件中都有同一个参数，MySQL数据库以哪个配置文件为准?”答案很简单，MySQL 数据库会以读取到的最后一个配置文件中的参数为准。
 配置文件中有一个参数datadir,该参数指定了数据库所在的路径。在Linux操作系统下默认datadir为/usr/local/mysql/data,用户可以修改该参数，当然也可以使用该路径，不过该路径只是一个指向/opt/mysql_data的目录
  mysql体系结构  应用程序通过数据库实例来操作数据库。
  由上图可知，mysql由以下几部分组成：
 链接吃组件
 管理服务和工具组件
 SQL接口组件
 查询分析器组件
 优化器组件
 缓冲（Cache）组件
 插件式存储引擎
 物理文件
  从图中还可以发现，MySQL数据库区别于其他数据库的最重要的一一个特点就是其插件式的表存储引擎。MySQL插件式的存储引擎架构提供了一系列标准的管理和服务支持，这些标准与存储引擎本身无关，可能是每个数据库系统本身都必需的，如SQL分析器和优化器等，而存储引擎是底层物理结构的实现，每个存储引擎开发者可以按照自己的意愿来进行开发。</description>
    </item>
    
    <item>
      <title>Foo</title>
      <link>https://xianxuan.github.io/post/foo/</link>
      <pubDate>Fri, 03 Aug 2018 14:31:24 +0800</pubDate>
      
      <guid>https://xianxuan.github.io/post/foo/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>