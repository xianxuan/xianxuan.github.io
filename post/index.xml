<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://xianxuan.github.io/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Dec 2018 23:12:52 +0800</lastBuildDate>
    
	<atom:link href="https://xianxuan.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Clean_code</title>
      <link>https://xianxuan.github.io/post/clean_code/clean_code/</link>
      <pubDate>Sat, 08 Dec 2018 23:12:52 +0800</pubDate>
      
      <guid>https://xianxuan.github.io/post/clean_code/clean_code/</guid>
      <description> “稍等等于永不”
 &amp;ldquo;外表或举止上令人愉悦的优雅和美观&amp;rdquo;
  </description>
    </item>
    
    <item>
      <title>Mysql技术内幕之文件</title>
      <link>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8B%E6%96%87%E4%BB%B6/</link>
      <pubDate>Thu, 06 Dec 2018 18:27:20 +0800</pubDate>
      
      <guid>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8B%E6%96%87%E4%BB%B6/</guid>
      <description>参数文件  mysql启动的时候会先去读取一个配置参数文件，默认情况下，mysql会按照一定的顺序在指定位置读取，如果在制定位置没有找到mysql架构，那么mysql启动将会失败。
 mysql的参数文件是文本方式存储的
  什么是参数  可以把mysql的参数看做键值对，通过show variables 可以查看所有参数.   参数类型  mysql参数类型分为两类：
 动态参数
 静态参数
  动态参数意味着可以在MySQL实例运行中进行更改，静态参数说明在整个实例生命周期内都不得进行更改，就好像是只读(read only)的。可以通过SET命令对动态的参数值进行修改，SET 的语法如下:
SET | [global | session] system_var_name= expr | [@@g1obal. | @@session. | @@]system_var_name= expr  这里可以看到global和session关键字，它们表明该参数的修改是基于当前会话还是整个实例的生命周期。有些动态参数只能在会话中进行修改，如autocommit;而有些参数修改完后，在整个实例生命周期中都会生效，如binlog. cache_size ;而有些参数既可以在会话中又可以在整个实例的生命周期内生效，如read_buffer_size。
 这里需要注意的是，对变量的全局值进行了修改，在这次的实例生命周期内都有效，但MySQL实例本身并不会对参数文件中的该值进行修改。也就是说，在下次启动时MySQL实例还是会读取参数文件。若想在数据库实例下&amp;ndash;次启动时该参数还是保留为当前修改的值，那么用户必须去修改参数文件。
 静态变量对其进行修改会报错
  日志文件  日志文件类型
 错误日志
 二进制日志
 慢查询日志
 查询日志
   错误日志  错误日志文件对MySQL的启动、运行、关闭过程进行了记录。MySQL DBA在遇到问题时应该首先查看该文件以便定位问题。该文件不仅记录了所有的错误信息，也记录一些警告信息或正确的信息。用户可以通过命令SHOW VARIABLES LIKE &amp;lsquo;log error&amp;rsquo; 来定位该文件.</description>
    </item>
    
    <item>
      <title>Mysql技术内幕之InnoDB存储引擎</title>
      <link>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8Binnodb%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link>
      <pubDate>Wed, 05 Dec 2018 13:40:44 +0800</pubDate>
      
      <guid>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8Binnodb%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid>
      <description>InnoDB存储引擎概述  第一个完成支持ACID事物的mysql存储引擎。   InnoDB体系架构  后台线程-&amp;gt;InnoDB存储引擎内存池-&amp;gt;文件   后台线程  Master Thread
 MasterThread是&amp;ndash;个非常核心的后台线程，主要负责将缓冲池中的数据异步刷新到磁盘，保证数据的一-致性，包括脏页的刷新、合并插人缓冲(INSERT BUFFER)、UNDO页的回收等。   IO Thread
 在InnoDB存储引擎中大量使用了AIO (Async I0)来处理写IO请求，这样可以极大提高数据库的性能。而IOThread的工作主要是负责这些IO请求的回调(callback)处理。  Purge Thread
 事务被提交后，其所使用的undolog可能不再需要，因此需要PurgeThread来回收已经使用并分配的undo页。   Page Cleaner Thread
 其作用是将之前版本中脏页的刷新操作都放人到单独的线程中来完成。而其目的是为了减轻原Master Thread的工作及对于用户查询线程的阻塞，进- -步提高InnoDB存储引擎的性能。   内存 缓冲池  缓冲池简单来说就是一块内存区域，通过内存的速度来弥补磁盘速度较慢对数据库性能的影响。
 在数据库中进行读取页的操作，首先将从磁盘读到的页存放在缓冲池中，这个过程称为将页“FIX”在缓冲池中。下一次再读相同的页时，首先判断该页是否在缓冲池中。若在缓冲池中，称该页在缓冲池中被命中，直接读取该页。否则，读取磁盘上的页。
 对于数据库中页的修改操作，则首先修改在缓冲池中的页，然后再以一定的频率刷新到磁盘上。这里需要注意的是，页从缓冲池刷新回磁盘的操作并不是在每次页发生更新时触发，而是通过- -种称为Checkpoint的机制刷新回磁盘。同样，这也是为了提高数据库的整体性能。
 对于InnoDB存储引擎而言，其缓冲池的配置通过参数innodb__buffer_poolsize来设置。可以通过参数innodb buffer_ pool instances 来进行配置，缓冲池实例个数。
 具体来看，缓冲池中缓存的数据页类型有:索引页、数据页、undo页、插人缓冲(insertbuffer)、自适应哈希索引(adaptivehashindex)、InnoDB存储的锁信息(lockinfo)、数据字典信息( data dictionary)等。不能简单地认为，缓冲池只是缓存索引页和数据页，它们只是占缓冲池很大的一部分而已。
  LRU List. Free List FI Flush List  通常来说，数据库中的缓冲池是通过LRU ( Latest Recent Used,最近最少使用)算法来进行管理的。即最频繁使用的页在LRU列表的前端，而最少使用的页在LRU列表的尾端。当缓冲池不能存放新读取到的页时，将首先释放LRU列表中尾端的页。</description>
    </item>
    
    <item>
      <title>Mysql技术内幕之体系结构和存储引擎</title>
      <link>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8B%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link>
      <pubDate>Wed, 05 Dec 2018 10:16:03 +0800</pubDate>
      
      <guid>https://xianxuan.github.io/post/mysql/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E4%B9%8B%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid>
      <description>数据库和实例的定义  数据库:物理操作系统文件或其他形式文件类型的集合。在MySQL数据库中，数据库文件可以是fm、MYD、MYI、ibd 结尾的文件。当使用NDB引擎时，数据库的文件可能不是操作系统上的文件，而是存放于内存之中的文件，但是定义仍然不变。
 实例: MySQL数据库由后台线程以及一个共享内存区组成。共享内存可以被运行的后台线程所共享。需要牢记的是，数据库实例才是真正用于操作数据库文件的。
 区别：这两个词有时可以互换使用，不过两者的概念完全不同。在MySQL数据库中，实例与数据库的关通常系是- &amp;ndash;对应的，即-一个实例对应-一个数据库，-一个数据库对应一个实例。但是，在集群情况下可能存在一个数据库被多个数据实例使用的情况。
 mysql是单进程多线程架构的数据库，和sqlserver类似，和oracle不同（oracle的windows版本也是单进程多线程架构）,mysql数据库实例就是一个进程
 mysql数据库会读取配置文件，配置文件存放位置可以通过以下代码查看：
命令：mysql --help | grep my.cnf 输出：order of preference, my.cnf, $MYSQL_ _TCP_ PORT, /etc/my.cnf /etc/mysql/my.cnf /usr/ local/mysql/etc/my.cnf ~/ .my.cnf  可以看到，MySQL 数据库是按/etc/my.cnf→/etc/mysql/my.cnf - + /usr/local/mysqletc/my.cnf→~ /.my.cnf的顺序读取配置文件的。可能有读者会问:“如果几个配置文件中都有同一个参数，MySQL数据库以哪个配置文件为准?”答案很简单，MySQL 数据库会以读取到的最后一个配置文件中的参数为准。
 配置文件中有一个参数datadir,该参数指定了数据库所在的路径。在Linux操作系统下默认datadir为/usr/local/mysql/data,用户可以修改该参数，当然也可以使用该路径，不过该路径只是一个指向/opt/mysql_data的目录
  mysql体系结构  应用程序通过数据库实例来操作数据库。
  由上图可知，mysql由以下几部分组成：
 链接吃组件
 管理服务和工具组件
 SQL接口组件
 查询分析器组件
 优化器组件
 缓冲（Cache）组件
 插件式存储引擎
 物理文件
  从图中还可以发现，MySQL数据库区别于其他数据库的最重要的一一个特点就是其插件式的表存储引擎。MySQL插件式的存储引擎架构提供了一系列标准的管理和服务支持，这些标准与存储引擎本身无关，可能是每个数据库系统本身都必需的，如SQL分析器和优化器等，而存储引擎是底层物理结构的实现，每个存储引擎开发者可以按照自己的意愿来进行开发。</description>
    </item>
    
    <item>
      <title>Foo</title>
      <link>https://xianxuan.github.io/post/foo/</link>
      <pubDate>Fri, 03 Aug 2018 14:31:24 +0800</pubDate>
      
      <guid>https://xianxuan.github.io/post/foo/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>